# Activate AER package
library(AER)
# Load the dataset
data(TeachingRatings)
# Assign dataset to "data"
data <- TeachingRatings
# Displays the first 3 rows
head(data, 3)
library(stringr)
# Each word is converted to upper case for the first letter, using str_to_title from stringr
# Uppercase first letter of column names
colnames(data) <- str_to_title(colnames(data))
# Displaying headers
colnames(data)
# Rename some columns
colnames(data)[4] <- "courseCredits"
colnames(data)[5] <- "scoreBeauty"
colnames(data)[6] <- "scoreEval"
colnames(data)[7] <- "courseDivision"
colnames(data)[8] <- "nativeEnglishspkr"
colnames(data)[9] <- "Tenure-Track"
colnames(data)[10] <- "Evaluators: students"
colnames(data)[11] <- "evaluatorsTotal"
colnames(data)[12] <- "profID"
colnames(data)
library(stringi)
# Changes all matching characters to new ones
data$Minority <- stri_replace_all_regex(data$Minority, c("yes", "no"), c("Yes", "No"), vectorize = F)
data$nativeEnglishspkr <- stri_replace_all_regex(data$nativeEnglishspkr, c("yes", "no"), c("Yes", "No"), vectorize = F)
data$`Tenure-Track` <- stri_replace_all_regex(data$`Tenure-Track`, c("yes", "no"), c("Yes", "No"), vectorize = F)
data$Gender <- stri_replace_all_regex(data$Gender, c("female", "male"), c("F", "M"), vectorize = F)
data$courseCredits <- stri_replace_all_regex(data$courseCredits, c("more", "single"), c("More", "Single"), vectorize = F)
data$courseDivision <- stri_replace_all_regex(data$courseDivision, c("upper", "lower"), c("Upper", "Lower"), vectorize = F)
head(data, 3)

# write the data in CSV format
write.csv(data, "TeachingRatings_updated.csv", row.names = F)


# Creating a linear regression model
lm <- lm(scoreEval ~ scoreBeauty, data)
# Using summary(), you can get residual standard error, multiple R-squared, adjusted R-squared, and F-statistic of lm()
summary(lm)
# Predict the values based on the predictor variable
predicted <- predict(lm, newdata = data)
# To see the predicted values, call "predicted"
predicted
# round values to one decimal place in a new column named "Predicted_scoreEval"
data$Predicted_scoreEval <- round(predicted, 1)
head(data, 3)
colnames(data)[6] <- "Actual_scoreEval"
library(dplyr)
# Place the "Predicted_scoreEval" column at the specified location
data <- data %>% relocate(Predicted_scoreEval, .before = Actual_scoreEval)
head(data, 3)
# Identify whether the prediction is "correct" or "wrong"
data$Correct <- ifelse(data$Actual_scoreEval == data$Predicted_scoreEval, "Correct", "Incorrect")
data <- data %>% relocate(Correct, .after = Actual_scoreEval)
head(data, 3)
library(caret)
# Factorize some columns
data$Actual_scoreEval <- factor(data$Actual_scoreEval)
data$Predicted_scoreEval <- factor(data$Predicted_scoreEval)
# Using a confusion matrix, calculate the percent of correct cases
confusion_mat <- confusionMatrix(data = data$Predicted_scoreEval, reference = data$Actual_scoreEval)
confusion_mat
library(scales)
percent(confusion_mat$overall, .01)

write.csv(data, "TeachingRatings with Predicted Eval_updated.csv", row.names = F)



# Creating a new dataframe that contains the data of variables
df <- data.frame(data$Age, data$scoreBeauty, data$Actual_scoreEval, data$Predicted_scoreEval)
colnames(df) <- c("Age", "scoreBeauty", "Actual_scoreEval", "Predicted_scoreEval")
head(df, 3)
# Display the data structure,
# including information about the observations and variables,
# along with additional information such as the name of the columns, the class of each column, and a few of their initial observations
str(df)
# Numerical conversion
df$Age <- as.numeric(df$Age)
df$scoreBeauty <- as.numeric(df$scoreBeauty)
df$Actual_scoreEval <- as.numeric(df$Actual_scoreEval)
df$Predicted_scoreEval <- as.numeric(df$Predicted_scoreEval)
# Create a correlation and assign it to "r"
r <- cor(df)
library(corrplot)
# Correlation matrix plot
# mar = c(0,0,1,0) - Title margin
corrplot(r, type = "upper", method = "number", title = "Matrix Plot of Age, Beauty Score, Evaluation Score, and Predicted Evaluation Score",
         mar = c(0,0,1,0))
